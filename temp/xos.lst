C51 COMPILER V9.00   XOS                                                                   07/30/2011 11:47:59 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE XOS
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: G:\Keil 4 C51\C51\BIN\C51.EXE src\kernel\xos.c OMF2 BROWSE INCDIR(.\inc;.\inc\xlib;.\inc\kernel) DE
                    -BUG PRINT(.\temp\xos.lst) SRC(.\temp\xos.SRC)

line level    source

   1          /**
   2           * xos API
   3           * */
   4          #include "xos.h"
   5          #include "kernel.h"
   6          #include INCLUDE_MCU
   7          
   8          u8_t data current = 0; /*当前任务*/
   9          u8_t data os_sp;
  10          u8_t data _irq;
  11          
  12          u8_t data stack_bottom[NR_TASK];
  13          u8_t data id_timeslice[NR_TASK];                                                   
  14          u8_t data task_status[NR_TASK];
  15          u16_t data sleep_time[NR_TASK];
  16          
  17          #if (SLEEPED_FIRST != 0)   
  18                  //sleeped_task每一位代表一个任务，
  19                  //任务休眠，则相应的sleeped_task位置位
  20                  u8_t sleeped_task = 0;
  21          #endif /* SLEEPED_FIRST*/           
  22          
  23          #ifdef XOS_REENTRANT  
  24                  extern u8_t data bp[NR_TASK]; 
  25          #pragma ASM              
  26                  extrn data (?C_IBP)
  27          #pragma ENDASM
  28          #endif 
  29          
  30          #ifdef CUSTOMIZE_STACK
              static void customize_stack()
              {
                      stack_bottom[0] = 0x80 + SAVE_REG + 1;
                      stack_bottom[1] = 0x90 + SAVE_REG + 1;
                      stack_bottom[id] = STACK_START + SAVE_REG + 1;
                      /* ... */
              }
              #endif
  39          
  40          #ifdef CUSTOMIZE_C_BP
              static void customize_c_bp()
              {
                      bp[0] = 0x80;
                      bp[1] = 0x76;
                      /* ... */
              }
              #endif  /* CUSTOMIZE_C_BP*/
  48          
  49          /**
  50           * xos_init调用. 初始单片机寄存器,数据
  51           * */
  52           /**
  53           
  54          XOS_INIT:
C51 COMPILER V9.00   XOS                                                                   07/30/2011 11:47:59 PAGE 2   

  55                  mov OS_SP, sp   ; 保存当前栈位置,,以后重新进入内核都从这个栈开始
  56                  lcall _init
  57                  ;sp = 任务0栈,开始任务0
  58                  mov a, stack_bottom
  59                  clr c
  60                  subb a, #SAVE_REG
  61                  mov sp, a       
  62                  ret
  63           */
  64          void xos_init()
  65          {
  66   1              os_sp = SP;
  67   1      
  68   1              THN = THX;
  69   1              TLN = TLX;
  70   1              TMOD = (TMOD & (~0x0f)) | 0x01;
  71   1              IP = 0x02;
  72   1              EA = 1;
  73   1              TRN = 1;
  74   1              ETN = 1;
  75   1              current = 0;
  76   1      
  77   1      #ifdef CUSTOMIZE_STACK
                      customize_stack();
              #endif
  80   1      
  81   1      
  82   1              SP = stack_bottom[0] - SAVE_REG;
  83   1      
  84   1      #ifdef XOS_REENTRANT 
  85   1      #ifdef CUSTOMIZE_C_BP
                      customize_c_bp();
              #endif
  88   1      #pragma ASM
  89   1              mov C_BP, #C_BP_END
  90   1      #pragma ENDASM
  91   1      #endif 
  92   1      }
  93          
  94          /**
  95           * 把任务添加到XOS.
  96           * func: 任务的函数地址
  97           * */
  98          void add_task(unsigned int func) 
  99          {       
 100   1              u8_t id = current;       
 101   1              u8_t *p;
 102   1              
 103   1              current++;
 104   1              id_timeslice[id] = (id << 4) + TIME_SLICE;
 105   1              task_status[id] = 0x00;
 106   1      #ifndef CUSTOMIZE_STACK
 107   1              stack_bottom[id] = STACK_SZ * id + STACK_START + SAVE_REG + 1;
 108   1      #endif
 109   1              p = (u8_t *)(STACK_SZ * id + STACK_START);
 110   1              *p = (func & 0xff);
 111   1              p++;
 112   1              *p = (func >> 8); 
 113   1      #ifdef XOS_REENTRANT 
 114   1              #ifndef CUSTOMIZE_C_BP
 115   1                      bp[id] = C_BP_END - (C_BP_SIZE * id);
 116   1              #endif
C51 COMPILER V9.00   XOS                                                                   07/30/2011 11:47:59 PAGE 3   

 117   1      #endif          
 118   1              //return id;
 119   1              /**/
 120   1      }
 121          
 122          /**
 123           * 进行任务调度, 任务让出CPU, 让出一个任务运行. time slice 时间片清0
 124           * */
 125          void schedule()
 126          {
 127   1      #pragma ASM                     
 128   1              push    acc
 129   1              PUSH    B               
 130   1              PUSH    DPH             
 131   1              PUSH    DPL             
 132   1              PUSH    PSW             
 133   1              PUSH    AR0             
 134   1              PUSH    AR1             
 135   1              PUSH    AR2             
 136   1              PUSH    AR3             
 137   1              PUSH    AR4             
 138   1              PUSH    AR5             
 139   1              PUSH    AR6             
 140   1              PUSH    AR7                      
 141   1      #pragma ENDASM  
 142   1              stack_bottom[current] = SP;
 143   1              SP = os_sp;
 144   1              set_os();
 145   1              id_timeslice[current] &= (~0x0f);
 146   1              do_schedule();
 147   1      }
 148          
 149          /**
 150           * 任务休眠
 151           * n: 休眠的时间, 单位为HZ,则系统时间片的时间. 如果为HZ(宏)则1秒,
 152           *              如果为0, 则任务不再工作.
 153           * PS: 任务主函数如果不是死循环工作,那么最后应该调用sleep(0),让任务不再工作.否则系统跑飞
 154           * */
 155          void sleep(unsigned int n) 
 156          {       
 157   1              u8_t tmp;
 158   1      #pragma ASM
 159   1              push    acc
 160   1              PUSH    B               
 161   1              PUSH    DPH             
 162   1              PUSH    DPL             
 163   1              PUSH    PSW             
 164   1              PUSH    AR0             
 165   1              PUSH    AR1             
 166   1              PUSH    AR2             
 167   1              PUSH    AR3             
 168   1              PUSH    AR4             
 169   1              PUSH    AR5             
 170   1              PUSH    AR6             
 171   1              PUSH    AR7                      
 172   1      #pragma ENDASM  
 173   1              stack_bottom[current] = SP;
 174   1              SP = os_sp;
 175   1              set_os();
 176   1              /* 时间片已用超过一半*/
 177   1              tmp = (0x100 - THN);
 178   1              if (tmp > ((0xff - THX) >> 1))
C51 COMPILER V9.00   XOS                                                                   07/30/2011 11:47:59 PAGE 4   

 179   1                      n++;
 180   1              sleep_time[current] = n;
 181   1              tmp = 0;
 182   1              tmp |= TASK_SLEEP;
 183   1              if (tmp == 0) {
 184   2                      tmp |= TASK_OVER;
 185   2              } 
 186   1              task_status[current] |= tmp;
 187   1              do_schedule();
 188   1      }
 189          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    294    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
