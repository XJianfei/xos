C51 COMPILER V9.00   XOS                                                                   07/09/2011 17:21:27 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE XOS
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: G:\Keil 4 C51\C51\BIN\C51.EXE src\kernel\xos.c BROWSE INCDIR(.\inc;.\inc\xlib;.\inc\kernel) DEBUG O
                    -BJECTEXTEND PRINT(.\temp\xos.lst) SRC(.\temp\xos.SRC)

line level    source

   1          /**
   2           * xos API
   3           * */
   4          #include "xos.h"
   5          #include "kernel.h"
   6          #include INCLUDE_MCU
   7          
   8          u8 data current = 0; /*当前任务*/
   9          u8 data os_sp;
  10          u8 data _irq;
  11          /**
  12           strcut task_desc {
  13                  _u8 stack_bottom;               // 堆栈底
  14                  _u8 id_timeslice;               // id 和 时间片
  15                  _u8 task_status;                // 状态
  16                  _u16 sleep_time;                        // sleep 调用的睡眠时间. 单位为秒.
  17                  _u8     sem_count;              // 在等待信号量的个数.
  18           }
  19           分开来定义变量比结构体处理的速度快
  20           task_desc[id].sleep_time --> &task_desc + sizeof(struct task_desc) * id + 3
  21           sleep_time[id] --> &sleep_time + id
  22           */
  23          u8 data stack_bottom[NR_TASK];
  24          u8 data id_timeslice[NR_TASK];                                             
  25          u8 data task_status[NR_TASK];
  26          u16 data sleep_time[NR_TASK];
  27          
  28          #if (SLEEPED_FIRST != 0)   
  29                  //sleeped_task每一位代表一个任务，
  30                  //任务休眠，则相应的sleeped_task位置位
  31                  u8 sleeped_task = 0;
  32          #endif /* SLEEPED_FIRST*/           
  33          
  34          #ifdef XOS_REENTRANT  
  35                  extern u8 data bp[NR_TASK]; 
  36          #pragma ASM              
  37                  extrn data (?C_IBP)
  38          #pragma ENDASM
  39          #endif 
  40          
  41          #ifdef CUSTOMIZE_STACK
              static void customize_stack()
              {
                      stack_bottom[0] = 0x80 + SAVE_REG + 1;
                      stack_bottom[1] = 0x90 + SAVE_REG + 1;
                      stack_bottom[id] = STACK_START + SAVE_REG + 1;
                      /* ... */
              }
              #endif
  50          
  51          #ifdef CUSTOMIZE_C_BP
              static void customize_c_bp()
              {
                      bp[0] = 0x80;
C51 COMPILER V9.00   XOS                                                                   07/09/2011 17:21:27 PAGE 2   

                      bp[1] = 0x76;
                      /* ... */
              }
              #endif  /* CUSTOMIZE_C_BP*/
  59          
  60          /**
  61           * xos_init调用. 初始单片机寄存器,数据
  62           * */
  63           /**
  64           
  65          XOS_INIT:
  66                  mov OS_SP, sp   ; 保存当前栈位置,,以后重新进入内核都从这个栈开始
  67                  lcall _init
  68                  ;sp = 任务0栈,开始任务0
  69                  mov a, stack_bottom
  70                  clr c
  71                  subb a, #SAVE_REG
  72                  mov sp, a       
  73                  ret
  74           */
  75          void xos_init()
  76          {
  77   1              os_sp = SP;
  78   1      
  79   1              TH0 = TH;
  80   1              TL0 = TL;
  81   1              TMOD = (TMOD & (~0x0f)) | 0x01;
  82   1              IP = 0x02;
  83   1              EA = 1;
  84   1              TR0 = 1;
  85   1              ET0 = 1;
  86   1              current = 0;
  87   1      
  88   1      #ifdef CUSTOMIZE_STACK
                      customize_stack();
              #endif
  91   1      
  92   1      
  93   1              SP = stack_bottom[0] - SAVE_REG;
  94   1      
  95   1      #ifdef XOS_REENTRANT 
  96   1      #ifdef CUSTOMIZE_C_BP
                      customize_c_bp();
              #endif
  99   1      #pragma ASM
 100   1              mov C_BP, #C_BP_END
 101   1      #pragma ENDASM
 102   1      #endif 
 103   1      }
 104          
 105          /**
 106           * 把任务添加到XOS.
 107           * func: 任务的函数地址
 108           * */
 109          void add_task(unsigned int func) 
 110          {       
 111   1              u8 id = current;         
 112   1              u8 *p;
 113   1              
 114   1              current++;
 115   1              id_timeslice[id] = (id << 4) + TIME_SLICE;
 116   1              task_status[id] = 0x00;
C51 COMPILER V9.00   XOS                                                                   07/09/2011 17:21:27 PAGE 3   

 117   1      #ifndef CUSTOMIZE_STACK
 118   1              stack_bottom[id] = STACK_SZ * id + STACK_START + SAVE_REG + 1;
 119   1      #endif
 120   1              p = (u8 *)(STACK_SZ * id + STACK_START);
 121   1              *p = (func & 0xff);
 122   1              p++;
 123   1              *p = (func >> 8); 
 124   1      #ifdef XOS_REENTRANT 
 125   1              #ifndef CUSTOMIZE_C_BP
 126   1                      bp[id] = C_BP_END - (C_BP_SIZE * id);
 127   1              #endif
 128   1      #endif          
 129   1              //return id;
 130   1              /**/
 131   1      }
 132          
 133          /**
 134           * 进行任务调度, 任务让出CPU, 让出一个任务运行. time slice 时间片清0
 135           * */
 136          void schedule()
 137          {
 138   1      #pragma ASM                     
 139   1              push    acc
 140   1              PUSH    B               
 141   1              PUSH    DPH             
 142   1              PUSH    DPL             
 143   1              PUSH    PSW             
 144   1              PUSH    AR0             
 145   1              PUSH    AR1             
 146   1              PUSH    AR2             
 147   1              PUSH    AR3             
 148   1              PUSH    AR4             
 149   1              PUSH    AR5             
 150   1              PUSH    AR6             
 151   1              PUSH    AR7                      
 152   1      #pragma ENDASM  
 153   1              stack_bottom[current] = SP;
 154   1              SP = os_sp;
 155   1              set_os();
 156   1              id_timeslice[current] &= (~0x0f);
 157   1              do_schedule();
 158   1      }
 159          
 160          /**
 161           * 任务休眠
 162           * n: 休眠的时间, 单位为HZ,则系统时间片的时间. 如果为HZ(宏)则1秒,
 163           *              如果为0, 则任务不再工作.
 164           * PS: 任务主函数如果不是死循环工作,那么最后应该调用sleep(0),让任务不再工作.否则系统跑飞
 165           * */
 166          void sleep(unsigned int n) 
 167          {       
 168   1              u8 tmp;
 169   1      #pragma ASM
 170   1              push    acc
 171   1              PUSH    B               
 172   1              PUSH    DPH             
 173   1              PUSH    DPL             
 174   1              PUSH    PSW             
 175   1              PUSH    AR0             
 176   1              PUSH    AR1             
 177   1              PUSH    AR2             
 178   1              PUSH    AR3             
C51 COMPILER V9.00   XOS                                                                   07/09/2011 17:21:27 PAGE 4   

 179   1              PUSH    AR4             
 180   1              PUSH    AR5             
 181   1              PUSH    AR6             
 182   1              PUSH    AR7                      
 183   1      #pragma ENDASM  
 184   1              stack_bottom[current] = SP;
 185   1              SP = os_sp;
 186   1              set_os();
 187   1              /* 时间片已用超过一半*/
 188   1              tmp = (0x100 - TH0);
 189   1              if (tmp > ((0xff - TH) >> 1))
 190   1                      n++;
 191   1              sleep_time[current] = n;
 192   1              tmp = 0;
 193   1              tmp |= TASK_SLEEP;
 194   1              if (tmp == 0) {
 195   2                      tmp |= TASK_OVER;
 196   2              } 
 197   1              task_status[current] |= tmp;
 198   1              do_schedule();
 199   1      }
 200          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    294    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
