C51 COMPILER V9.00   XOS                                                                   07/05/2011 16:34:10 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE XOS
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: G:\Keil 4 C51\C51\BIN\C51.EXE src\kernel\xos.c BROWSE INCDIR(.\inc;.\inc\xlib;.\inc\kernel) DEBUG O
                    -BJECTEXTEND PRINT(.\temp\xos.lst) SRC(.\temp\xos.SRC)

line level    source

   1          /**
   2           * xos API
   3           * */
   4          #include "xos.h"
   5          #include "kernel.h"
   6          #include INCLUDE_MCU
   7          
   8          u8 data current = 0; /*当前任务*/
   9          u8 data os_sp;
  10          u8 data _irq;
  11          
  12          u8 data stack_bottom[NR_TASK];
  13          u8 data id_timeslice[NR_TASK];                                             
  14          u8 data task_status[NR_TASK];
  15          u16 data sleep_time[NR_TASK];
  16          
  17          #if (SLEEPED_FIRST != 0)
  18                  u8 sleeped_task = 0;
  19          #endif /* SLEEPED_FIRST*/           
  20          
  21          #ifdef XOS_REENTRANT  
  22                  extern u8 data bp[NR_TASK]; 
  23          #pragma ASM              
  24                  extrn data (?C_IBP)
  25          #pragma ENDASM
  26          #endif 
  27          
  28          #ifdef CUSTOMIZE_STACK
              static void customize_stack()
              {
                      stack_bottom[0] = 0x80 + SAVE_REG + 1;
                      stack_bottom[1] = 0x90 + SAVE_REG + 1;
                      stack_bottom[id] = STACK_START + SAVE_REG + 1;
                      /* ... */
              }
              #endif
  37          
  38          #ifdef CUSTOMIZE_C_BP
              static void customize_c_bp()
              {
                      bp[0] = 0x80;
                      bp[1] = 0x76;
                      /* ... */
              }
              #endif  /* CUSTOMIZE_C_BP*/
  46          
  47          /**
  48           * xos_init调用. 初始单片机寄存器,数据
  49           * */
  50           /**
  51           
  52          XOS_INIT:
  53                  mov OS_SP, sp   ; 保存当前栈位置,,以后重新进入内核都从这个栈开始
  54                  lcall _init
C51 COMPILER V9.00   XOS                                                                   07/05/2011 16:34:10 PAGE 2   

  55                  ;sp = 任务0栈,开始任务0
  56                  mov a, stack_bottom
  57                  clr c
  58                  subb a, #SAVE_REG
  59                  mov sp, a       
  60                  ret
  61           */
  62          void xos_init()
  63          {
  64   1              os_sp = SP;
  65   1      
  66   1              TH0 = TH;
  67   1              TL0 = TL;
  68   1              TMOD = (TMOD & (~0x0f)) | 0x01;
  69   1              IP = 0x02;
  70   1              EA = 1;
  71   1              TR0 = 1;
  72   1              ET0 = 1;
  73   1              current = 0;
  74   1      
  75   1      #ifdef CUSTOMIZE_STACK
                      customize_stack();
              #endif
  78   1      
  79   1      
  80   1              SP = stack_bottom[0] - SAVE_REG;
  81   1      
  82   1      #ifdef XOS_REENTRANT 
  83   1      #ifdef CUSTOMIZE_C_BP
                      customize_c_bp();
              #endif
  86   1      #pragma ASM
  87   1              mov C_BP, #C_BP_END
  88   1      #pragma ENDASM
  89   1      #endif 
  90   1      }
  91          
  92          /**
  93           * 把任务添加到XOS.
  94           * func: 任务的函数地址
  95           * */
  96          void add_task(unsigned int func) 
  97          {       
  98   1              u8 id = current;         
  99   1              u8 *p;
 100   1              
 101   1              current++;
 102   1              id_timeslice[id] = (id << 4) + TIME_SLICE;
 103   1              task_status[id] = 0x00;
 104   1      #ifndef CUSTOMIZE_STACK
 105   1              stack_bottom[id] = STACK_SZ * id + STACK_START + SAVE_REG + 1;
 106   1      #endif
 107   1              p = (u8 *)(STACK_SZ * id + STACK_START);
 108   1              *p = (func & 0xff);
 109   1              p++;
 110   1              *p = (func >> 8); 
 111   1      #ifdef XOS_REENTRANT 
 112   1              #ifndef CUSTOMIZE_C_BP
 113   1                      bp[id] = C_BP_END - (C_BP_SIZE * id);
 114   1              #endif
 115   1      #endif          
 116   1              //return id;
C51 COMPILER V9.00   XOS                                                                   07/05/2011 16:34:10 PAGE 3   

 117   1              /**/
 118   1      }
 119          
 120          /**
 121           * 进行任务调度, 任务让出CPU, 让出一个任务运行. time slice 时间片清0
 122           * */
 123          void schedule()
 124          {
 125   1      #pragma ASM                     
 126   1              push    acc
 127   1              PUSH    B               
 128   1              PUSH    DPH             
 129   1              PUSH    DPL             
 130   1              PUSH    PSW             
 131   1              PUSH    AR0             
 132   1              PUSH    AR1             
 133   1              PUSH    AR2             
 134   1              PUSH    AR3             
 135   1              PUSH    AR4             
 136   1              PUSH    AR5             
 137   1              PUSH    AR6             
 138   1              PUSH    AR7                      
 139   1      #pragma ENDASM  
 140   1              stack_bottom[current] = SP;
 141   1              SP = os_sp;
 142   1              set_os();
 143   1              id_timeslice[current] &= (~0x0f);
 144   1              do_schedule();
 145   1      }
 146          
 147          /**
 148           * 任务休眠
 149           * n: 休眠的时间, 单位为HZ,则系统时间片的时间. 如果为HZ(宏)则1秒,
 150           *              如果为0, 则任务不再工作.
 151           * PS: 任务主函数如果不是死循环工作,那么最后应该调用sleep(0),让任务不再工作.否则系统跑飞
 152           * */
 153          void sleep(unsigned int n) 
 154          {       
 155   1              u8 tmp;
 156   1      #pragma ASM
 157   1              push    acc
 158   1              PUSH    B               
 159   1              PUSH    DPH             
 160   1              PUSH    DPL             
 161   1              PUSH    PSW             
 162   1              PUSH    AR0             
 163   1              PUSH    AR1             
 164   1              PUSH    AR2             
 165   1              PUSH    AR3             
 166   1              PUSH    AR4             
 167   1              PUSH    AR5             
 168   1              PUSH    AR6             
 169   1              PUSH    AR7                      
 170   1      #pragma ENDASM  
 171   1              stack_bottom[current] = SP;
 172   1              SP = os_sp;
 173   1              set_os();
 174   1              /* 时间片已用超过一半*/
 175   1              tmp = (0x100 - TH0);
 176   1              if (tmp > ((0xff - TH) >> 1))
 177   1                      n++;
 178   1              sleep_time[current] = n;
C51 COMPILER V9.00   XOS                                                                   07/05/2011 16:34:10 PAGE 4   

 179   1              tmp = 0;
 180   1              tmp |= TASK_SLEEP;
 181   1              if (tmp == 0) {
 182   2                      tmp |= TASK_OVER;
 183   2              } 
 184   1              task_status[current] |= tmp;
 185   1              do_schedule();
 186   1      }
 187          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    294    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
