C51 COMPILER V9.00   XOS                                                                   08/06/2011 14:50:59 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE XOS
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: G:\Keil 4 C51\C51\BIN\C51.EXE src\kernel\xos.c OMF2 BROWSE INCDIR(.\inc;.\inc\xlib;.\inc\kernel) DE
                    -BUG PRINT(.\temp\xos.lst) SRC(.\temp\xos.SRC)

line level    source

   1          /**
   2           * \file xos.c
   3           * \brief xos API
   4           * */
   5          #include "xos.h"
   6          #include "kernel.h"
   7          /**当前任务*/
   8          u8_t data current = 0; 
   9          /** 内核栈指针 */
  10          u8_t data os_sp;
  11          //u8_t data _irq;
  12          /** 任务栈底 */
  13          u8_t data stack_bottom[NR_TASK];
  14          /** 任务ID和时间片 */
  15          u8_t data id_timeslice[NR_TASK];                                                   
  16          /** 任务状态 
  17           * \sa TASK_SLEEP, TASK_OVER, TASK_SEM_WAIT*/
  18          u8_t data task_status[NR_TASK];
  19          /** 任务睡眠时间 */
  20          u16_t data sleep_time[NR_TASK];
  21          
  22          #if (SLEEPED_FIRST != 0)   
  23                  //sleeped_task每一位代表一个任务，
  24                  //任务休眠，则相应的sleeped_task位置位
  25                  u8_t sleeped_task = 0;
  26          #endif /* SLEEPED_FIRST*/           
  27          
  28          #ifdef XOS_REENTRANT  
  29          #pragma ASM              
  30                  extrn data (?C_IBP) /** 虚拟栈 */
  31          #pragma ENDASM
  32                  extern u8_t data bp[NR_TASK]; 
  33          #endif /* XOS_REENTRANT */
  34          //[0]
  35          #ifdef CUSTOMIZE_STACK
              /**
               * \brief 当自定义任务栈时, \a customize_stack 被 \fn xos_init()调用.用来初始化任务栈
               */
              static void customize_stack()
              {
                      stack_bottom[0] = 0x80 + SAVE_REG + 1;
                      stack_bottom[1] = 0x90 + SAVE_REG + 1;
                      stack_bottom[id] = STACK_START + SAVE_REG + 1;
                      /* ... */
              }
              #endif /* CUSTOMIZE_STACK */ 
  47          #ifdef CUSTOMIZE_C_BP
              /**
               * 当自定义任务虚拟栈时(c51机制), /fn customize_c_bp 被 /fn xos_init()调用
               */
              static void customize_c_bp()
              {
                      bp[0] = 0x80;
                      bp[1] = 0x76;
C51 COMPILER V9.00   XOS                                                                   08/06/2011 14:50:59 PAGE 2   

                      /* ... */
              }
              #endif  /* CUSTOMIZE_C_BP*/
  58          /*!
  59           * 初始单片机寄存器,数据. 初始内核资源, 最后进入任务0
  60           * XOS_INIT:
  61           * mov OS_SP, sp * ; 保存当前栈位置,,以后重新进入内核都从这个栈开始
  62           * lcall _init
  63           * ;sp = 任务0栈,开始任务0
  64           * mov a, stack_bottom
  65           * clr c
  66           * subb a, #SAVE_REG
  67           * mov sp, a    
  68           * ret
  69           */
  70          void xos_init()
  71          {
  72   1              os_sp = SP;
  73   1      
  74   1              THN = THX;
  75   1              TLN = TLX;
  76   1              TMOD = (TMOD & (~0x0f)) | 0x01;
  77   1              IP = 0x02;
  78   1              EA = 1;
  79   1              TRN = 1;
  80   1              ETN = 1;
  81   1              current = 0;
  82   1      
  83   1      #ifdef CUSTOMIZE_STACK
                      customize_stack();
              #endif
  86   1      
  87   1      
  88   1              SP = stack_bottom[0] - SAVE_REG;
  89   1      
  90   1      #ifdef XOS_REENTRANT 
  91   1      #ifdef CUSTOMIZE_C_BP
                      customize_c_bp();
              #endif
  94   1      #pragma ASM
  95   1              mov C_BP, #C_BP_END
  96   1      #pragma ENDASM
  97   1      #endif 
  98   1      }
  99          
 100          /**
 101           * 把任务添加到XOS.
 102           * \param func 任务的函数地址
 103           * */
 104          void add_task(unsigned int func) 
 105          {       
 106   1              u8_t id = current;       
 107   1              u8_t *p;
 108   1              
 109   1              current++;
 110   1              id_timeslice[id] = (id << 4) + TIME_SLICE;
 111   1              task_status[id] = 0x00;
 112   1      #ifndef CUSTOMIZE_STACK
 113   1              stack_bottom[id] = STACK_SZ * id + STACK_START + SAVE_REG + 1;
 114   1      #endif
 115   1              p = (u8_t *)(STACK_SZ * id + STACK_START);
 116   1              *p = (func & 0xff);
C51 COMPILER V9.00   XOS                                                                   08/06/2011 14:50:59 PAGE 3   

 117   1              p++;
 118   1              *p = (func >> 8); 
 119   1      #ifdef XOS_REENTRANT 
 120   1              #ifndef CUSTOMIZE_C_BP
 121   1                      bp[id] = C_BP_END - (C_BP_SIZE * id);
 122   1              #endif
 123   1      #endif          
 124   1              //return id;
 125   1              /**/
 126   1      }
 127          
 128          /**
 129           * 进行任务调度, 任务让出CPU, 让出一个任务运行. 任务时间片清0
 130           * */
 131          void schedule()
 132          {
 133   1      #pragma ASM                     
 134   1              push    acc
 135   1              PUSH    B               
 136   1              PUSH    DPH             
 137   1              PUSH    DPL             
 138   1              PUSH    PSW             
 139   1              PUSH    AR0             
 140   1              PUSH    AR1             
 141   1              PUSH    AR2             
 142   1              PUSH    AR3             
 143   1              PUSH    AR4             
 144   1              PUSH    AR5             
 145   1              PUSH    AR6             
 146   1              PUSH    AR7                      
 147   1      #pragma ENDASM  
 148   1              stack_bottom[current] = SP;
 149   1              SP = os_sp;
 150   1              set_os();
 151   1              id_timeslice[current] &= (~0x0f);
 152   1              do_schedule();
 153   1      }
 154          
 155          /**
 156           * 任务休眠
 157           * 任务主函数如果不是死循环工作,那么最后应该调用sleep(0),让任务不再工作.否则系统跑飞
 158           * \param n 休眠的时间, 单位为\a HZ,则系统时间片的时间. 如果为\a HZ(宏)则1秒,<br>
 159           *              如果为0, 则任务不再工作.
 160           * \sa HZ
 161           * */
 162          void sleep(unsigned int n) 
 163          {       
 164   1              u8_t tmp;
 165   1      #pragma ASM
 166   1              push    acc
 167   1              PUSH    B               
 168   1              PUSH    DPH             
 169   1              PUSH    DPL             
 170   1              PUSH    PSW             
 171   1              PUSH    AR0             
 172   1              PUSH    AR1             
 173   1              PUSH    AR2             
 174   1              PUSH    AR3             
 175   1              PUSH    AR4             
 176   1              PUSH    AR5             
 177   1              PUSH    AR6             
 178   1              PUSH    AR7                      
C51 COMPILER V9.00   XOS                                                                   08/06/2011 14:50:59 PAGE 4   

 179   1      #pragma ENDASM  
 180   1              stack_bottom[current] = SP;
 181   1              SP = os_sp;
 182   1              set_os();
 183   1              /* 时间片已用超过一半*/
 184   1              tmp = (0x100 - THN);
 185   1              if (tmp > ((0xff - THX) >> 1))
 186   1                      ++n;
 187   1              sleep_time[current] = n;
 188   1              tmp = 0;
 189   1              tmp |= TASK_SLEEP;
 190   1              if (tmp == 0) {
 191   2                      tmp |= TASK_OVER;
 192   2              } 
 193   1              task_status[current] |= tmp;
 194   1              do_schedule();
 195   1      }
 196          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    294    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
