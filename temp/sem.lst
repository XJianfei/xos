C51 COMPILER V9.00   SEM                                                                   08/06/2011 14:48:02 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SEM
OBJECT MODULE PLACED IN .\temp\sem.obj
COMPILER INVOKED BY: G:\Keil 4 C51\C51\BIN\C51.EXE src\kernel\sem.c OMF2 BROWSE INCDIR(.\inc;.\inc\xlib;.\inc\kernel) DE
                    -BUG PRINT(.\temp\sem.lst) OBJECT(.\temp\sem.obj)

line level    source

   1          
   2          #include "sem.h"
   3          #ifdef SEMPHORE
              u8 data sem_count[NR_TASK];
              void sem_down(semphore *sem)
              {
                      disable_irq_save();
                      if (sem->count == 0) {
                              sem_count[current]++;
                              task_status[current] |= TASK_SEM_WAIT;
                              sem->wait_task |= (1 << current);
                              enable_irq_restore();
                              schedule();
                      } else {
                              sem->count--;
                              enable_irq_restore();
                      }
              }
              
              
              u8 sem_try_down(semphore *sem)
              {
                      u8 ret = 1;
                      disable_irq_save();
                      if (sem->count == 0)
                              goto sem_quit;
                      sem->count--;
                      ret = 0;
              sem_quit:
                      enable_irq_restore();
                      return ret;
              }
              void sem_up(semphore *sem, unsigned char n)
              {
                      u8 id, s_id;
                      if (n == 0)
                              return;
                      disable_irq_save();
                      sem->count += n;
                      if (sem->count < n)
                              sem->count = -1;
                      if (sem->wait_task != 0) {
                              /**
                               * TL0 & 0X7, 为了不是每次up都是从0开始,所以用TL0来获得一个随机数,从这个随机数开机
                               * */
                              id = (TLN) & 7;
                              s_id = id;
                              do {
                                      n = (1 << id);
                                      if (sem->wait_task & n) {
                                              sem->wait_task &= ~n;
                                              sem->count--;
                                              --sem_count[id];
                                              if (sem_count[id] == 0) {
C51 COMPILER V9.00   SEM                                                                   08/06/2011 14:48:02 PAGE 2   

                                                      task_status[id] &= (~TASK_SEM_WAIT);
                                              }
                                              if (sem->count == 0)
                                                      break;
                                      }
                                      id++;
                                      if (id >= MAX_TASK)
                                              id = 0;
                              } while ((s_id != id) && (sem->wait_task != 0));
                      }
                      enable_irq_restore();
              }
              
              #endif //SEMPHORE


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
