C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE 12864
OBJECT MODULE PLACED IN .\temp\12864.obj
COMPILER INVOKED BY: G:\Keil 4 C51\C51\BIN\C51.EXE src\xlib\12864.c OMF2 BROWSE INCDIR(.\inc;.\inc\xlib;.\inc\kernel) DE
                    -BUG PRINT(.\temp\12864.lst) OBJECT(.\temp\12864.obj)

line level    source

   1          /*****************************************************************************
   2            /12864液晶驱动程序,
   3            /
   4          /*****************************************************************************/
   5          #include "12864.h"
   6          #include "xos.h"
   7          #define DATA_PARALLEL   1
   8          #define DATA_SERIAL             0
   9          #define DATA_MODE       0       
  10          #ifdef BOARD    
              sbit RS=P2^2;
              sbit RW=P2^1;
              sbit EN=P2^0;
              sbit RST=P3^1;
              sbit PSB=P3^0;
              sbit cbusy=P1^7;
              #define data0 P1
              
              #else
  20          sbit RS = P3 ^ 2;  //30
  21          sbit RW = P3 ^ 3;  //31
  22          sbit EN = P3 ^ 4;  //32
  23          sbit RST = P3 ^ 5; //35
  24          sbit PSB = P3 ^ 6; //33
  25          /* RS 30; RW 31; EN 32; RST 35; PSB 33**/
  26          
  27          #define CS RS
  28          #define SID RW
  29          #define SCLK EN
  30                                                            
  31          #define data0 P1
  32          sbit cbusy = data0 ^ 7;
  33          #endif /* BOARD */
  34          
  35          sbit ACC7 = ACC^7;
  36          sbit ACC6 = ACC^6;
  37          sbit ACC5 = ACC^5;
  38          sbit ACC4 = ACC^4;
  39          sbit ACC3 = ACC^3;
  40          sbit ACC2 = ACC^2;
  41          sbit ACC1 = ACC^1;
  42          sbit ACC0 = ACC^0;
  43          
  44          #define SET_CS()        CS = 1
  45          #define CLR_CS()        CS = 0
  46          #define SET_CLKH()              SCLK = 1
  47          #define SET_CLKL()              SCLK = 0
  48          #define SET_WRITE()     SID = RW_WR
  49          #define SET_READ()      SID = RW_RD
  50          #define SET_CMD()       SID = RS_CMD
  51          #define SET_DATA()      SID = RS_DATA
  52          
  53          /* Serial timing */
  54          #if (CPU_T == CPU_1T)
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 2   

  55          
  56          #define TCLK_WH(n)      \
  57                  do {    \
  58                          _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();        \
  59                  } while (0)
  60          #define TCLK_WL(n)      \
  61                  do {    \
  62                          _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();        \
  63                  } while (0)
  64          #define TCLK_SETUP(n)   \
  65                  do {    \
  66                          _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();        \
  67                  } while (0)
  68          #define TDATA_SETUP()   \
  69                  do {    \
  70                          _nop_();_nop_();        \
  71                  } while (0)
  72          #define TDATA_HOLD()    \
  73                  do {    \
  74                          _nop_();_nop_();   \
  75                  } while (0)
  76          
  77          #else
              
              #define TCLK_WH()       \
                      do {    \
                              _nop_();        \
                      } while (0)
              #define TCLK_WL()       \
                      do {    \
                              _nop_();        \
                      } while (0)
              #define TCLK_SETUP()    \
                      do {    \
                              _nop_();        \
                      } while (0)
              #define TDATA_SETUP()   \
                      do {    \
                      } while (0)
              #define TDATA_HOLD()    \
                      do {    \
                              _nop_();_nop_();  \
                      } while (0)
              
              #endif /* CPU_T == CPU_1T */
 100          
 101          /* Serial macro */
 102          #define rise_clk_setup()        do {SET_CLKH(); TCLK_SETUP();} while (0)
 103          #define rise_clk_hold()         do {SET_CLKH(); TCLK_SETUP(); TCLK_WH();} while (0)
 104          #define rise_clk()                      SET_CLKH()
 105          #define set_slcd_sid(n)         SID = n
 106          #define set_slcd_data(n)        do {SID = n; TDATA_SETUP();} while (0)
 107          #define set_slcd_data_hold(n)   do {set_slcd_data(n); TDATA_HOLD();} while (0)
 108          #define get_slcd_sid()          SID
 109          #define fall_clk()                      SET_CLKL()
 110          #define fall_clk_hold()         do {fall_clk(); TCLK_WL(); } while (0)
 111          /*
 112          #define quit_serial(n)  \
 113                          syn_bit_str(n); \
 114                          SID = 1;        \
 115                          CLR_CS();
 116          */
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 3   

 117          #define write_serial_bit(n)     \
 118                  do {    \
 119                          fall_clk();     \
 120                          TCLK_SETUP();   \
 121                          set_slcd_sid(n);        \
 122                          TDATA_SETUP();  \
 123                          rise_clk();     \
 124                          TCLK_WH();      \
 125                  } while (0)
 126          #define read_serial_bit(n)      \
 127                  do {    \
 128                          fall_clk();     \
 129                          TCLK_SETUP();   \
 130                          TDATA_SETUP();  \
 131                          n = get_slcd_sid();     \
 132                          rise_clk();     \
 133                  } while (0)
 134          
 135          #define set_12864_rwrs(rw, rs)  \
 136                  do {    \
 137                          write_serial_bit(rw);   \
 138                          write_serial_bit(rs);   \
 139                  } while (0);
 140          #define write_serial_sam(t, n, b)       \
 141                          do {    \
 142                                  t = n;  \
 143                                  while (t){ \
 144                                          write_serial_bit(b);    \
 145                                          --t;    \
 146                                  }       \
 147                          } while (0)
 148          #define read_serial_dis(t, n)   \
 149                          do {    \
 150                                  t = n;  \
 151                                  while (t) {     \
 152                                          fall_clk();     \
 153                                          TCLK_SETUP();   \
 154                                          TDATA_SETUP();  \
 155                                          --t;    \
 156                                          rise_clk();     \
 157                                          TCLK_WH();      \
 158                                  }       \
 159                          } while (0)
 160          
 161          #if (DATA_MODE == DATA_SERIAL)
 162          #define enter_serial(n, rw, rs) \
 163                  do {    \
 164                          SET_CS();       \
 165                          SET_CLKH();     \
 166                          write_serial_sam(n, 5, 1);      \
 167                          set_12864_rwrs(rw, rs); \
 168                          write_serial_bit(0);    \
 169                  } while (0)
 170          #define exit_serial()   CLR_CS()
 171          #endif
 172          
 173          
 174          #if (DATA_MODE == DATA_SERIAL)
 175          #else
              
              #endif /* DATA_MODE == DATA_SERIAL */
 178          
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 4   

 179          
 180          
 181                                                    
 182          #define LCD_DATA        1
 183          #define LCD_CMD         0
 184          #define CMD 0
 185          #define DATA 1
 186          #define disfiRSt        0xc0
 187          #define sety    0x80    //第一行.
 188          #define setx    0x80    //上半屏
 189          #define setxx   0x88    //下半屏
 190          #define C_BUSY_TIME 50
 191          /*                         
 192                                     TC System cycle time 13,000 ns
 193                                     TAS Address setup time 1500ns
 194                                     TR/TF Enable rise/fall time   25ns
 195                                     TDSW Data setup time 1,000ns 
 196                                     TH Data hold time 20ns 
 197                                     TPW Enable pulsewidth 1,500ns 
 198          
 199                                     Data setup time TDDR 1,000ns 
 200           **/
 201          #if (CPU_T == CPU_1T)
 202          #define TC(n)   \
 203                  do {  \
 204                          _nop_();_nop_();_nop_();_nop_();        \
 205                          _nop_();_nop_();_nop_(); \       
 206                          _nop_();_nop_();_nop_();_nop_();        \
 207                                  _nop_();_nop_();_nop_(); \
 208                                  _nop_();_nop_();_nop_();_nop_();        \
 209                                  _nop_();_nop_();_nop_(); \
 210                  }while(0)
 211          #define TAS(n)  do {_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_(); \
 212                  _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();}while(0)
 213          #define TR(n)
 214          #define TDSW(n) do {_nop_();_nop_();_nop_();_nop_();_nop_(); \
 215                  _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();}while(0)
 216          #define TH(n)   
 217          #define TPW(n)  do {_nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_(); \
 218                  _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_(); \
 219                  _nop_();_nop_();_nop_();_nop_();_nop_();_nop_();_nop_(); }while(0)
 220          
 221          #define TDDR(n) do {_nop_();_nop_();_nop_();_nop_();_nop_(); \
 222                  _nop_();_nop_();_nop_(); \
 223                  _nop_();}while(0)
 224          #else
              #define TC()    \
                      do {  \
                              _nop_();_nop_();_nop_();_nop_();        \
                              _nop_();_nop_();_nop_(); \       
                              _nop_();_nop_();_nop_();_nop_();        \
                                      _nop_();_nop_();_nop_(); \
                                      _nop_();_nop_();_nop_();_nop_();        \
                                      _nop_();_nop_();_nop_(); \
                      }while(0)
              #define TAS(n)   _nop_()
              #define TR(n)    
              #define TDSW(n) do {_nop_();}while(0)
              #define TH(n)   
              #define TPW(n)  do {_nop_();}while(0)   
              
              #define TDDR(n) do {_nop_();}while(0)
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 5   

              
              
              #endif /* STC12C5A*/
 244          /*****************位定义*************************/
 245          /*******************************************/
 246          static void write_data(register u8_t dc,register u8_t dat); //写数据或命令
 247          static unsigned char read_data(register u8_t b); //读数据或命令
 248          static unsigned char chk_busy(); //检查忙状态
 249          void init_12864(); //初始化12864LCD
 250          //void printsnake(unsigned int x,unit y,unsigned char color);           //蛇身结点显示
 251          /*******************************************/
 252          
 253          /********************写数据或指令(dc==1为数据)*********************/
 254          static void write_data(register u8_t dc,register u8_t dat) {
 255   1      #if (DATA_MODE == DATA_PARALLEL)
                      register u8_t i = C_BUSY_TIME;
                      while ((i != 0) && chk_busy())
                              --i;
                      RS = dc;
                      RW = 0; 
                      TAS(i);
                      EN = 1;   
                      data0 = dat;
                      TPW(i);
                      TH(i);
                      EN = 0;
              #else 
 268   1              register u8_t circle, i;
 269   1              /* first byte 11111AB0 */
 270   1              enter_serial(i, RW_WR, dc);
 271   1              circle = 0x80;
 272   1              /* high 4 bit DDDD0000*/
 273   1              /*
 274   1              while (circle != (1 << 3)) {
 275   1                      write_serial_bit(circle & dat);
 276   1                      circle >>= 1;
 277   1              }*/
 278   1              ACC = dat;
 279   1              write_serial_bit(ACC7);
 280   1              write_serial_bit(ACC6);
 281   1              write_serial_bit(ACC5);
 282   1              write_serial_bit(ACC4);
 283   1              write_serial_sam(i, 4, 0);
 284   1              /* low 4 bit 0000DDDD */
 285   1              write_serial_bit(ACC3);
 286   1              write_serial_bit(ACC2);
 287   1              write_serial_bit(ACC1);
 288   1              write_serial_bit(ACC0);
 289   1      /*
 290   1              while (circle) {
 291   1                      write_serial_bit(circle & dat);
 292   1                      circle >>= 1;
 293   1              }*/
 294   1              write_serial_sam(i, 4, 0);
 295   1              exit_serial();
 296   1      #endif 
 297   1      }
 298          /*******************读数据.状态.1为数据**************************************/
 299          static unsigned char read_data(register u8_t b) {
 300   1      #if (DATA_MODE == DATA_PARALLEL)
                      register u8_t da;
                      register u8_t i = C_BUSY_TIME;
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 6   

                      while ((i != 0) && chk_busy())
                              --i;
                      RS = b;
                      RW = 1;         
                      TAS(i);  
                      data0 = 0xff;
                      EN = 1;    
                      TDDR(i);
                      da = data0;
                      TPW(i);
                      TH(i);
                      EN = 0;
                      return da;
              #else 
 317   1              register u8_t dat;
 318   1              enter_serial(dat, RW_RD, b);
 319   1              dat = 0;
 320   1              b = 0;
 321   1              read_serial_bit(b);
 322   1              dat |= (b << 7);
 323   1              read_serial_bit(b);
 324   1              dat |= (b << 6);
 325   1              read_serial_bit(b);
 326   1              dat |= (b << 5);
 327   1              read_serial_bit(b);
 328   1              dat |= (b << 4);
 329   1              read_serial_dis(dat, 4);
 330   1              read_serial_bit(b);
 331   1              dat |= (b << 3);
 332   1              read_serial_bit(b);
 333   1              dat |= (b << 2);
 334   1              read_serial_bit(b);
 335   1              dat |= (b << 1);
 336   1              read_serial_bit(b);
 337   1              dat |= (b << 0);
 338   1              read_serial_dis(dat, 4);
 339   1              exit_serial();
 340   1              return dat;
 341   1      #endif
 342   1      }
 343          /*********************忙状态检测***************************/
 344          static unsigned char chk_busy() {
 345   1      #if (DATA_MODE == DATA_PARALLEL)
                      register unsigned char  busy;
                      register unsigned char k;
                      EN = 0;
                      for (k = 0; k < 2; k++) {
                              RS = 0;
                              RW = 1;
                              TAS(busy);
                              data0 = 0xff;  
                              EN = 1;         
                              TR(busy);
                              busy = (data0 & 0x80);
                              TPW(busy);
                              EN = 0;
                      }
                      return busy;
              #else
 362   1              register u8_t dat;
 363   1              enter_serial(dat, RW_RD, RS_CMD);
 364   1              dat = 0;
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 7   

 365   1              read_serial_bit(dat);
 366   1              return (dat);
 367   1      #endif
 368   1      }
 369          
 370          /********************初始化LCD***************************************/
 371          void init_12864() {
 372   1              PSB = DATA_MODE;
 373   1              RST = 1;
 374   1              sleep(HZ / 25);
 375   1              disable_irq();
 376   1              write_data(0, 0x30); //基本指令
 377   1              _nop_();
 378   1              write_data(0, 0x0c); //开显示
 379   1              _nop_();
 380   1              write_data(0, 0x01); //清屏
 381   1              _nop_();
 382   1              write_data(0, 0x06); //光标的移动方向
 383   1              enable_irq();
 384   1              
 385   1      }
 386          
 387          //清屏,全部为空
 388          /*********************************************************/
 389          void clear_lcd(void)
 390          {
 391   1              u8_t i,j;
 392   1              for(j=0;j<32;j++)
 393   1              {
 394   2                      for(i=0;i<8;i++)
 395   2                      {
 396   3                              write_data(0,0x34);
 397   3                              write_data(0,0x80+j);
 398   3                              write_data(0,0x80+i);
 399   3              //              write_data(0,0x30);
 400   3                              write_data(1,0);
 401   3                              write_data(1,0);
 402   3      
 403   3                              
 404   3                              write_data(0,0x34);
 405   3                              write_data(0,0x80+j);
 406   3                              write_data(0,0x88+i);
 407   3                              write_data(0,0x30);       
 408   3                              write_data(1,0);
 409   3                              write_data(1,0);
 410   3                      }
 411   2              }
 412   1              write_data (0,0x36);
 413   1      }
 414          /****************在X,Y处显示一个(16*16)汉字****************/
 415          /*                              0<=x<8,0<=y<4                                           *******/
 416          #if DISPLAY_STR
              void printstr(register u8_t x, register u8_t  y, register u8_t n, unsigned char *chi) { 
                      disable_irq();
                      switch (y) {
                              case 0:
                                      y = 0x80;
                                      break;
                              case 1:
                                      y = 0x90;
                                      break;
                              case 2:
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 8   

                                      y = 0x88;
                                      break;
                              case 3:
                                      y = 0x98;
                                      break;
                      }
                      y += x; //计算要显示的液晶坐标
                      write_data(0, 0x30);
                      write_data(0, y);
                      if (n == 0)
                              n = 16;
                      y = 0;
                      while (chi[y] != '\0' && n--) {
                              write_data(1, chi[y]);
                              y++;
                      }
                      write_data(RS_CMD, 0x34);
                      enable_irq();
              }
              #endif /* DISPLAY_STR */
 447          void reverse(unsigned char line) {
 448   1              disable_irq();
 449   1              write_data(CMD, 0x34);
 450   1              write_data(CMD, 4 + line);
 451   1              write_data(CMD, 0x30);
 452   1              enable_irq();
 453   1      }
 454          
 455          void clear_12864() {
 456   1              disable_irq();
 457   1              write_data(0, 0x01); //清屏
 458   1              enable_irq();
 459   1      }
 460          
 461          /****************************************************
 462           ********************些文本主要在12864绘点.直线,
 463           ********************Horizontal/Vertical line
 464           ****************************************************/
 465          /********************************************/
 466          
 467          //void Hline(u8_t x,u8_t y,u8_t L);     //横直线函数,在(x,y)处开始,长度为L
 468          //void Vline(u8_t x,u8_t y,u8_t L);     //竖直线函数,在(x,y)处开始,长度为L
 469          /******************函数实现****************/
 470          /****************写点函数实现,在(x,y)坐标显示点*************/
 471          //b为设置画点还是清除点.1为画.0为清
 472          /***********************************************************/
 473          void draw_point(register u8_t  x,register u8_t  y,register u8_t  b)
 474          {
 475   1              u8_t xtemp= x & 0xf;
 476   1              u8_t ch1=0,ch2=0;
 477   1              u16_t ch=0;
 478   1              if(y<=31) {     //在上半屏
 479   2                      x=0x80+(x >> 4);
 480   2              } else {           //在下半屏
 481   2                      y=y-32;
 482   2                      x=0x88+(x >> 4);
 483   2              }
 484   1              disable_irq();
 485   1              write_data(0,y+0x80);
 486   1              write_data(0,x);
 487   1      #if (DATA_MODE == DATA_PARALLEL)
                      read_data(LCD_DATA);
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 9   

              #endif
 490   1              ch1=read_data(LCD_DATA);                 //上八位
 491   1              ch2=read_data(LCD_DATA);                 //下八位
 492   1              ch=(ch1<<8)+ch2;
 493   1              if(b)                                   //处理是画还是清
 494   1                      ch|=(0x8000>>xtemp);
 495   1              else
 496   1                      ch&=(~(0x8000>>xtemp));
 497   1              //下面是绘画功能步骤            
 498   1              write_data(0,0x34);
 499   1              write_data(0,y+0x80);
 500   1              write_data(0,x);
 501   1              write_data(1,ch>>8);
 502   1              write_data(1,ch&0x00ff);
 503   1              write_data(0,0x36);     
 504   1              enable_irq();
 505   1      }
 506          /***************横直线函数,在(x,y)处开始,长度为L********************
 507          void draw_hline(register u8_t x, register u8_t y, register u8_t l)
 508          {
 509                  register u8_t i = 0;
 510                  while (i < l) {
 511                          draw_point(x + i, y, 1);        
 512                          ++i;
 513                  }               
 514          }
 515          
 516          /***************竖直线函数,在(x,y)处开始,长度为L********************
 517          void draw_vline(register u8_t x, register u8_t y, register u8_t l)
 518          {
 519                  register u8_t i=0;
 520                  while (i < l) {
 521                          draw_point(x,y+i,1);    
 522                          ++i;
 523                  }
 524          }
 525          /********************************************************************/
 526          //任意斜率,任意方向直线,坐标,从坐标(x1,y1)到(x2,y2),大小方向任意
 527          /********************************************************************/
 528          void draw_line(u8_t data x1, u8_t data y1,u8_t data x2,u8_t data y2, u8_t b)
 529          {
 530   1              u8_t idata temp,sx,sy,slope=0;
 531   1              register u8_t y = y1, x = x1,i = x1,j = 0, xx=0,yy=0;
 532   1              s8_t idata p;
 533   1              //XX,YY存放△X△Y,x,y存放直线坐标,sx,sy存放是加一还是减一,
 534   1              //slope表示是否斜率大于1.i,j用来计循环次数
 535   1              if(x2>x1)
 536   1                      xx=x2-x1;
 537   1              else
 538   1                      xx=x1-x2;
 539   1              if(y2>y1)
 540   1                      yy=y2-y1;               
 541   1              else
 542   1                      yy=y1-y2;
 543   1              j=x2;                   //初始认为计到x2处/
 544   1      
 545   1              if(yy <= xx){           //斜率小于1则X步进.大于1则Y步进
 546   2                      i=x1; j=x2;
 547   2              } else {
 548   2                      i=y1; j=y2;
 549   2              }
 550   1      
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 10  

 551   1              if(yy>xx) {             //判断斜率大于1,大于1则步进Y,小于1则步进X
 552   2                      temp=xx;                //
 553   2                      xx=yy;          //
 554   2                      yy=temp;                //xx.yy对掉
 555   2                      slope=1;                //
 556   2              }
 557   1      
 558   1              if(y2>y1)                       //计算直线是向下还是向上
 559   1                      sy=1;           //递增
 560   1              else
 561   1                      sy=-1;          //递减
 562   1      
 563   1              if(x2>x1)                       //计算直线是向左还是向右
 564   1                      sx=1;           //递增
 565   1              else
 566   1                      sx=-1;          //递减
 567   1              p = (yy << 1) - xx;             //初始P,用来计应该显示偏上还是偏下
 568   1      
 569   1              if(i>j) {               //改正i,j的大小
 570   2                      temp=i;
 571   2                      i=j;
 572   2                      j=temp;
 573   2              }
 574   1      
 575   1              while (i <= j){
 576   2                      draw_point(x,y,b);              //显示点
 577   2                      if(p>=0) {
 578   3                              if(!slope)                      //斜率小于1的情况.
 579   3                                      y+=sy;
 580   3                              else
 581   3                                      x+=sx;          //斜率大于1
 582   3                              p = p - (xx << 1);                      //大的步进
 583   3                      }
 584   2                      if(slope)                               //步进运算
 585   2                              y+=sy;
 586   2                      else
 587   2                              x+=sx;
 588   2                      p = p + (yy << 1);
 589   2                      ++i;
 590   2              }
 591   1      }
 592          #if 0
              void draw_64x64(u8_t *pic)
              {
                      register u8_t x, y, index = 0;
                      u8_t *pic2 = (pic + 256);
                      for (y = 0; y < 32; ++y) {
                              for (x = 0; x < 4; ++x) {
                                      /* upper */
                                      write_data(RS_CMD, CMD_EXT);
                                      write_data(RS_CMD, CMD_CGRAM(y));
                                      write_data(RS_CMD, CMD_CGRAM(x));
                                      write_data(0,0x30);
                                      write_data(RS_DATA, pic[index]);
                                      write_data(RS_DATA, pic[index + 1]);
                                      /* lower */
                                      write_data(RS_CMD, CMD_EXT);
                                      write_data(RS_CMD, CMD_CGRAM(y));
                                      write_data(RS_CMD, CMD_CGRAM(x + 8));
                                      write_data(0,0x30);
                                      write_data(RS_DATA, pic2[index]);
                                      write_data(RS_DATA, pic2[++index]);
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 11  

                                      ++index;
                              }
                      }
                      write_data (0,CMD_EXT_G);
              }
              #endif
 619          
 620          void draw_tran(u8_t *pic)
 621          {
 622   1              register u8_t x, y;
 623   1              for (y = 1; y < 32; ++y) {
 624   2                      for (x = 1; x < 8; ++x) {
 625   3                              write_data(RS_CMD, CMD_EXT);
 626   3                              write_data(RS_CMD, CMD_CGRAM(y));
 627   3                              write_data(RS_CMD, CMD_CGRAM(x));
 628   3                              write_data(RS_DATA, *pic);
 629   3                              ++pic;
 630   3                              write_data(RS_DATA, *pic);
 631   3                              ++pic;
 632   3                      }
 633   2              }
 634   1              for (y = 0; y < 29; ++y) {
 635   2                      for (x = 1; x < 8; ++x) {
 636   3                              write_data(RS_CMD, CMD_EXT);
 637   3                              write_data(RS_CMD, CMD_CGRAM(y));
 638   3                              write_data(RS_CMD, CMD_CGRAM(x + 8));
 639   3                              write_data(RS_DATA, *pic);
 640   3                              ++pic;
 641   3                              write_data(RS_DATA, *pic);
 642   3                              ++pic;
 643   3      
 644   3                      }
 645   2              }               
 646   1              write_data (0,CMD_EXT_G);
 647   1      }
 648          
 649          #if SHOW_PIC
              void pps(u8_t *img)
              {
              
                      u8_t i,j;
                      for(j=0;j<32;j++)
                      {
                              for(i=0;i<8;i++)
                              {
                                      write_data(0,0x34);
                                      write_data(0,0x80+j);
                                      write_data(0,0x80+i);
                                      write_data(1,img[j*16+i*2]);
                                      write_data(1,img[j*16+i*2+1]);
                              }
                      }
                      for(j=32;j<64;j++)
                      {
                              for(i=0;i<8;i++)
                              {
                                      write_data(0,0x34);
                                      write_data(0,0x80+j-32);
                                      write_data(0,0x88+i);
                                      write_data(1,img[j*16+i*2]);
                                      write_data(1,img[j*16+i*2+1]);
                              }
C51 COMPILER V9.00   12864                                                                 08/06/2011 14:48:51 PAGE 12  

                      }
                      write_data (0,0x36);
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1423    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----       5
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
