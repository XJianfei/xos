C51 COMPILER V9.00   KERNEL                                                                08/06/2011 14:50:59 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE KERNEL
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: G:\Keil 4 C51\C51\BIN\C51.EXE src\kernel\kernel.c OMF2 BROWSE INCDIR(.\inc;.\inc\xlib;.\inc\kernel)
                    - DEBUG PRINT(.\temp\kernel.lst) SRC(.\temp\kernel.SRC)

line level    source

   1          /*! 
   2           * \file kernel.c
   3           * \brief 内核处理, 任务调度, 时间片和睡眠处理,
   4           * @author xjf cexowginui@163.com
   5           */
   6          #include "xos.h"
   7          #include "kernel.h"
   8          
   9          #ifdef XOS_REENTRANT
  10          
  11                  /* 任务栈底指针 */
  12                  u8_t data bp[NR_TASK];  
  13                  #pragma ASM
  14                          extrn data (?C_IBP) /*  */
  15                  #pragma ENDASM
  16          
  17          #endif 
  18          /*
  19          #pragma ASM
  20          
  21          #pragma ENDASM          
  22          */
  23          /**
  24           * 
  25           */
  26          unsigned char xpcon;    /* 休眠时,PCON会复位,所以要保存 */
  27          /**
  28           * 任务调试, 找出空闲且有时间片的任务运行,没有可运行的任务则<br>
  29           * 进入休眠状态,直到下一个时间片到来或其它中断.
  30           */
  31          void do_schedule()
  32          {
  33   1              //_u8 id;
  34   1      TRY_AGAIN:
  35   1              //id = find_next();
  36   1              if (find_next() == NR_TASK) {
  37   2                      SP = os_sp;
  38   2                      EA = 1;
  39   2                      xpcon = PCON;
  40   2                      PCON |= 1;                      //休眠　
  41   2                      PCON = xpcon;
  42   2                      goto TRY_AGAIN;
  43   2              }
  44   1              //quit_os(id);  
  45   1      
  46   1      #ifdef XOS_REENTRANT    
  47   1      #pragma ASM     
  48   1                      // if (current != findnext()) //r7 = findnext();  {
  49   1                      MOV     A,current
  50   1                      XRL     A,r7
  51   1                      JZ      POPREGS
  52   1      
  53   1                      // bp[current] = C_BP
  54   1                      mov a, #bp
C51 COMPILER V9.00   KERNEL                                                                08/06/2011 14:50:59 PAGE 2   

  55   1                      add a, current
  56   1                      mov r0, a
  57   1                      mov @r0, C_BP 
  58   1                      // C_BP = bp[r7] // 
  59   1                      mov a, #bp
  60   1                      add a, r7
  61   1                      mov r0, a
  62   1                      mov C_BP, @r0
  63   1                      // }  
  64   1      POPREGS:
  65   1      #pragma ENDASM
  66   1      
  67   1      #endif /* XOS_REENTRANT*/
  68   1      
  69   1              //current = find_next();
  70   1              
  71   1      #pragma ASM             
  72   1              mov current, r7 
  73   1      #pragma ENDASM 
  74   1              SP = stack_bottom[current];
  75   1      #pragma ASM
  76   1                      pop ar7;
  77   1                      pop ar6;
  78   1                      pop ar5;
  79   1                      pop ar4;
  80   1                      pop ar3;
  81   1                      pop ar2;
  82   1                      pop ar1;
  83   1                      pop ar0;
  84   1      #pragma ENDASM   
  85   1              _pop_(PSW);    
  86   1              _pop_(DPL);
  87   1              _pop_(DPH);       
  88   1              _pop_(B);       
  89   1              _pop_(ACC); 
  90   1              clr_os();
  91   1      }
  92          
  93          
  94          
  95          
  96          /**
  97           * 查找下一个将要执行的任务
  98           * @return下一个要执行的任务, 如果返回NR_TASK,则全部都休眠或其它不能运行的状态.
  99           */
 100          u8_t find_next()
 101          {
 102   1              u8_t id, tmp;
 103   1              if (id_timeslice[current] != 0)
 104   1                      id_timeslice[current]--;
 105   1      #if (SLEEPED_FIRST != 0)
 106   1              //查找休眠时间结束的任务, sleeped_task每一位代表一个任务，
 107   1              //任务休眠，则相应的sleeped_task位置位
 108   1              if (sleeped_task != 0) {
 109   2                      for (id = 0; id < NR_TASK; id++) {
 110   3                              tmp = (1 << id);
 111   3                              if (sleeped_task & tmp) {
 112   4                                      sleeped_task &= tmp;
 113   4                                      if (task_status[id] == 0) {
 114   5                                              goto retback;    
 115   5                                      }
 116   4                              }
C51 COMPILER V9.00   KERNEL                                                                08/06/2011 14:50:59 PAGE 3   

 117   3                      }               
 118   2              }
 119   1      #endif /* SLEEPED_FIRST*/
 120   1              id = current;
 121   1              while ((id_timeslice[id] & 0xf) == 0
 122   1                      || (task_status[id] != 0)) {    
 123   2                      if (++id == NR_TASK) {
 124   3                              id = 0;         
 125   3                      }
 126   2                      /* 所有任务的时间片都用完, 时间片+5, 重新开始*/
 127   2                      if (id == current) {
 128   3                              for (id = 0; id < NR_TASK; id++) {
 129   4                                      id_timeslice[id] &= 0xf0;
 130   4                                      id_timeslice[id] += TIME_SLICE;
 131   4                              }                                
 132   3                              id = 0;
 133   3                              while (task_status[id] != 0) {
 134   4                                      id++;
 135   4                                      if (id == NR_TASK)
 136   4                                              goto retback;//return id;
 137   4                              }
 138   3                              break;
 139   3                      }
 140   2              }
 141   1      retback:
 142   1              return id;
 143   1      }
 144          
 145          /**
 146           * 任务休眠时间递减
 147           * */
 148          static void decreas_sleep_time()
 149          {
 150   1              u8_t i = 0;
 151   1              for (; i < NR_TASK; i++) {
 152   2                      if (sleep_time[i] != 0) {
 153   3                              sleep_time[i]--;
 154   3                              if (sleep_time[i] == 0) {
 155   4                                      task_status[i] &= (~TASK_SLEEP);
 156   4      #if (SLEEPED_FIRST != 0)
 157   4                                      sleeped_task |= (1 << i);
 158   4      #endif // SLEEPED_FIRST
 159   4                              }
 160   3                      }
 161   2              }
 162   1      }
 163          
 164          /**
 165           * 系统定时器中断函数<br>
 166           * 用了定时器1, 处理任务事件,调度
 167           * @see do_schedule()
 168           * @see find_next()
 169           * */
 170          void kernel_tick() interrupt 1
 171          {        
 172   1              THN = THX;
 173   1              TLN = TLX;
 174   1              if (!is_kernel())
 175   1                      stack_bottom[current] = SP;
 176   1              SP = os_sp;
 177   1              set_os();
 178   1      /* 清中断状态*/
C51 COMPILER V9.00   KERNEL                                                                08/06/2011 14:50:59 PAGE 4   

 179   1      #pragma ASM
 180   1              call irq_back
 181   1      #pragma ENDASM
 182   1              decreas_sleep_time();
 183   1              do_schedule();
 184   1      
 185   1      #pragma ASM
 186   1      irq_back:
 187   1              reti
 188   1      #pragma ENDASM  
 189   1      }
 190          /**/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    396    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
